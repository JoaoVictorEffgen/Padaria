#!/usr/bin/env python3
"""
Script para inicializar o banco de dados e adicionar o campo 'estoque'
"""
import os
import sys
import sqlite3

# Adicionar o backend ao path
sys.path.append('backend')

from backend.app.database import engine
from backend.app.models import Base

def init_database():
    print("üçû Inicializando banco de dados da padaria...")
    print("=" * 50)
    
    try:
        # Criar todas as tabelas
        print("üìù Criando tabelas...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tabelas criadas com sucesso!")
        
        # Verificar se o campo estoque existe
        db_path = "backend/database/padaria.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar estrutura da tabela produtos
        cursor.execute("PRAGMA table_info(produtos)")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]
        
        if 'estoque' not in column_names:
            print("üìù Adicionando campo 'estoque' na tabela produtos...")
            cursor.execute("ALTER TABLE produtos ADD COLUMN estoque INTEGER DEFAULT 0")
            
            # Atualizar produtos existentes com estoque padr√£o
            cursor.execute("UPDATE produtos SET estoque = 10 WHERE estoque IS NULL")
            conn.commit()
            print("‚úÖ Campo 'estoque' adicionado com sucesso!")
        else:
            print("‚úÖ Campo 'estoque' j√° existe!")
        
        # Mostrar estrutura final
        cursor.execute("PRAGMA table_info(produtos)")
        columns = cursor.fetchall()
        print("\nüìã Estrutura da tabela produtos:")
        for col in columns:
            print(f"  - {col[1]} ({col[2]}) - Default: {col[4]}")
        
        # Inserir alguns produtos de exemplo se a tabela estiver vazia
        cursor.execute("SELECT COUNT(*) FROM produtos")
        count = cursor.fetchone()[0]
        
        if count == 0:
            print("\nüì¶ Inserindo produtos de exemplo...")
            produtos_exemplo = [
                ("P√£o Franc√™s", 0.50, "P√£es", "P√£o franc√™s tradicional", 50),
                ("Croissant", 3.50, "P√£es", "Croissant de manteiga", 30),
                ("Bolo de Chocolate", 25.00, "Bolos", "Bolo de chocolate caseiro", 5),
                ("Caf√© Expresso", 2.50, "Bebidas", "Caf√© expresso", 100),
                ("Suco Natural", 4.00, "Bebidas", "Suco natural de laranja", 20)
            ]
            
            for produto in produtos_exemplo:
                cursor.execute("""
                    INSERT INTO produtos (nome, preco, categoria, descricao, estoque, disponivel)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, produto + (True,))
            
            conn.commit()
            print(f"‚úÖ {len(produtos_exemplo)} produtos inseridos!")
        
        # Mostrar produtos
        cursor.execute("SELECT id, nome, preco, estoque FROM produtos LIMIT 10")
        produtos = cursor.fetchall()
        print(f"\nüì¶ Produtos no banco (mostrando at√© 10):")
        for produto in produtos:
            print(f"  - ID {produto[0]}: {produto[1]} - R$ {produto[2]:.2f} - Estoque: {produto[3]}")
        
        conn.close()
        print("\nüéâ Banco de dados inicializado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco: {e}")
        return False

if __name__ == "__main__":
    success = init_database()
    
    if success:
        print("\nüí° Agora voc√™ pode:")
        print("  1. Iniciar o backend: python run_backend.py")
        print("  2. Iniciar o desktop: python run_desktop.py")
        print("  3. Iniciar o web: python run_web.py")
    else:
        print("\n‚ùå Falha na inicializa√ß√£o. Verifique os erros acima.") 