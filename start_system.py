#!/usr/bin/env python3
"""
Script de inicializa√ß√£o completa do Sistema de Padaria
Inclui todos os recursos extras implementados
"""

import os
import sys
import subprocess
import time
import socket
import platform
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do sistema"""
    print("=" * 60)
    print("           SISTEMA DE PADARIA - VERS√ÉO 2.0")
    print("=" * 60)
    print("Recursos implementados:")
    print("‚úì Sistema Desktop (PyQt5)")
    print("‚úì Backend API (FastAPI)")
    print("‚úì Aplicativo Tablet (Flutter)")
    print("‚úì Impress√£o de Comandas")
    print("‚úì Painel para Gar√ßons")
    print("‚úì Modo Offline com Sincroniza√ß√£o")
    print("‚úì QR Code para Menu P√∫blico")
    print("=" * 60)

def check_python_installation():
    """Verifica se Python est√° instalado e acess√≠vel"""
    print("üîç Verificando instala√ß√£o do Python...")
    
    # Tentar diferentes comandos Python
    python_commands = ['python', 'python3', 'py']
    python_path = None
    
    for cmd in python_commands:
        try:
            result = subprocess.run([cmd, '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                python_path = cmd
                print(f"‚úÖ Python encontrado: {result.stdout.strip()}")
                break
        except (FileNotFoundError, subprocess.TimeoutExpired):
            continue
    
    if not python_path:
        print("‚ùå Python n√£o encontrado no sistema!")
        print("\nüì• Para instalar o Python:")
        print("1. Acesse: https://www.python.org/downloads/")
        print("2. Baixe a vers√£o mais recente (3.8 ou superior)")
        print("3. Durante a instala√ß√£o, MARQUE 'Add Python to PATH'")
        print("4. Reinicie o terminal ap√≥s a instala√ß√£o")
        print("\nüîÑ Ou use o Microsoft Store:")
        print("   - Abra Microsoft Store")
        print("   - Procure por 'Python'")
        print("   - Instale a vers√£o mais recente")
        return None
    
    return python_path

def check_python_version(python_cmd):
    """Verifica vers√£o do Python"""
    try:
        result = subprocess.run([python_cmd, '--version'], 
                              capture_output=True, text=True)
        version_output = result.stdout.strip()
        
        # Extrair n√∫mero da vers√£o
        import re
        version_match = re.search(r'Python (\d+\.\d+)', version_output)
        if version_match:
            version = version_match.group(1)
            major, minor = map(int, version.split('.'))
            
            if major >= 3 and minor >= 8:
                print(f"‚úÖ Python {version} - Vers√£o compat√≠vel")
                return True
            else:
                print(f"‚ùå Python {version} - Vers√£o muito antiga")
                print("   Necess√°rio Python 3.8 ou superior")
                return False
        else:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel determinar a vers√£o: {version_output}")
            return True  # Assumir que √© compat√≠vel
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar vers√£o: {e}")
        return False

def install_dependencies(python_cmd):
    """Instala depend√™ncias Python"""
    print("\nüì¶ Instalando depend√™ncias Python...")
    try:
        # Verificar se requirements.txt existe
        if not Path("requirements.txt").exists():
            print("‚ùå Arquivo requirements.txt n√£o encontrado")
            return False
        
        # Instalar depend√™ncias
        result = subprocess.run([python_cmd, "-m", "pip", "install", "-r", "requirements.txt"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Depend√™ncias Python instaladas com sucesso")
            return True
        else:
            print(f"‚ùå Erro ao instalar depend√™ncias:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def setup_database(python_cmd):
    """Configura banco de dados"""
    print("\nüóÑÔ∏è  Configurando banco de dados...")
    try:
        # Verificar se o backend existe
        if not Path("backend").exists():
            print("‚ùå Diret√≥rio 'backend' n√£o encontrado")
            return False
        
        # Executar setup do banco
        result = subprocess.run([python_cmd, "-c", """
import sys
import os
sys.path.append('backend')
from app.database import engine, SessionLocal
from app import models
from app.models import Mesa, Produto, Garcom

# Criar tabelas
models.Base.metadata.create_all(bind=engine)
print("‚úÖ Tabelas criadas com sucesso")

# Inserir dados iniciais
db = SessionLocal()

# Verificar se j√° existem dados
if db.query(Mesa).count() == 0:
    # Criar mesas
    for i in range(1, 11):
        mesa = Mesa(numero=i, status="livre")
        db.add(mesa)
    print("‚úÖ 10 mesas criadas")

if db.query(Produto).count() == 0:
    # Criar produtos
    produtos = [
        Produto(nome="P√£o Franc√™s", preco=0.50, categoria="P√£es", descricao="P√£o franc√™s tradicional"),
        Produto(nome="P√£o de Queijo", preco=2.50, categoria="P√£es", descricao="P√£o de queijo caseiro"),
        Produto(nome="Croissant", preco=4.00, categoria="P√£es", descricao="Croissant de manteiga"),
        Produto(nome="Caf√© Expresso", preco=3.50, categoria="Caf√©s", descricao="Caf√© expresso tradicional"),
        Produto(nome="Cappuccino", preco=5.00, categoria="Caf√©s", descricao="Cappuccino com espuma de leite"),
        Produto(nome="Coca-Cola", preco=4.50, categoria="Bebidas", descricao="Refrigerante Coca-Cola 350ml"),
        Produto(nome="Suco de Laranja", preco=6.00, categoria="Bebidas", descricao="Suco de laranja natural"),
        Produto(nome="Brigadeiro", preco=3.00, categoria="Doces", descricao="Brigadeiro caseiro"),
        Produto(nome="Pastel de Carne", preco=5.50, categoria="Salgados", descricao="Pastel de carne mo√≠da"),
        Produto(nome="Coxinha", preco=4.50, categoria="Salgados", descricao="Coxinha de frango"),
    ]
    for produto in produtos:
        db.add(produto)
    print("‚úÖ 10 produtos criados")

if db.query(Garcom).count() == 0:
    # Criar gar√ßons
    garcons = [
        Garcom(nome="Jo√£o Silva", codigo="G001"),
        Garcom(nome="Maria Santos", codigo="G002"),
        Garcom(nome="Pedro Costa", codigo="G003"),
    ]
    for garcom in garcons:
        db.add(garcom)
    print("‚úÖ 3 gar√ßons criados")

db.commit()
db.close()
print("‚úÖ Banco de dados configurado com sucesso")
        """], capture_output=True, text=True)
        
        if result.returncode == 0:
            print(result.stdout)
            return True
        else:
            print(f"‚ùå Erro ao configurar banco:")
            print(result.stderr)
            return False
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar banco: {e}")
        return False

def start_backend(python_cmd):
    """Inicia o backend"""
    print("\nüöÄ Iniciando Backend API...")
    try:
        # Verificar se a porta est√° livre
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 8000))
        sock.close()
        
        if result == 0:
            print("‚ö†Ô∏è  Porta 8000 j√° est√° em uso. Backend pode j√° estar rodando.")
            return True
        
        # Iniciar backend em background
        if platform.system() == "Windows":
            subprocess.Popen([python_cmd, "-m", "uvicorn", "backend.app.main:app", 
                            "--host", "0.0.0.0", "--port", "8000", "--reload"],
                           creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            subprocess.Popen([python_cmd, "-m", "uvicorn", "backend.app.main:app", 
                            "--host", "0.0.0.0", "--port", "8000", "--reload"],
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # Aguardar backend inicializar
        print("‚è≥ Aguardando backend inicializar...")
        time.sleep(5)
        
        # Testar conex√£o
        try:
            import requests
            response = requests.get("http://localhost:8000/docs", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Backend iniciado com sucesso")
                print("üìñ Documenta√ß√£o API: http://localhost:8000/docs")
                return True
        except:
            pass
        
        print("‚ö†Ô∏è  Backend pode ter iniciado, mas n√£o foi poss√≠vel verificar")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar backend: {e}")
        return False

def start_desktop(python_cmd):
    """Inicia aplica√ß√£o desktop"""
    print("\nüñ•Ô∏è  Iniciando aplica√ß√£o Desktop...")
    try:
        if not Path("desktop/main.py").exists():
            print("‚ùå Arquivo desktop/main.py n√£o encontrado")
            return False
        
        if platform.system() == "Windows":
            subprocess.Popen([python_cmd, "desktop/main.py"],
                           creationflags=subprocess.CREATE_NEW_CONSOLE)
        else:
            subprocess.Popen([python_cmd, "desktop/main.py"],
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        print("‚úÖ Aplica√ß√£o Desktop iniciada")
        print("üí° Recursos dispon√≠veis:")
        print("   ‚Ä¢ Gest√£o de Comandas")
        print("   ‚Ä¢ Cadastro de Produtos")
        print("   ‚Ä¢ Gest√£o de Mesas")
        print("   ‚Ä¢ Painel de Gar√ßons")
        print("   ‚Ä¢ Impress√£o de Comandas")
        print("   ‚Ä¢ Relat√≥rios")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar desktop: {e}")
        return False

def check_flutter():
    """Verifica se Flutter est√° instalado"""
    try:
        result = subprocess.run(["flutter", "--version"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Flutter encontrado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ö†Ô∏è  Flutter n√£o encontrado")
    print("üì± Para usar o aplicativo tablet, instale o Flutter:")
    print("   https://flutter.dev/docs/get-started/install")
    return False

def setup_tablet():
    """Configura aplicativo tablet"""
    if not check_flutter():
        return False
    
    print("\nüì± Configurando aplicativo Tablet...")
    try:
        # Verificar se o projeto Flutter existe
        if not Path("tablet").exists():
            print("‚ùå Diret√≥rio 'tablet' n√£o encontrado")
            return False
        
        # Instalar depend√™ncias Flutter
        os.chdir("tablet")
        subprocess.run(["flutter", "pub", "get"], check=True, capture_output=True)
        os.chdir("..")
        
        print("‚úÖ Depend√™ncias Flutter instaladas")
        print("üì± Para executar o tablet:")
        print("   cd tablet")
        print("   flutter run")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar tablet: {e}")
        return False

def show_network_info():
    """Mostra informa√ß√µes de rede"""
    print("\nüåê Informa√ß√µes de Rede:")
    try:
        # Obter IP local
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        print(f"   Hostname: {hostname}")
        print(f"   IP Local: {local_ip}")
        print(f"   Backend API: http://{local_ip}:8000")
        print(f"   Documenta√ß√£o: http://{local_ip}:8000/docs")
        print(f"   Menu P√∫blico: http://{local_ip}:8000/menu/1")
        
        print("\nüì± Para conectar tablets:")
        print(f"   ‚Ä¢ Configure o IP {local_ip} no aplicativo")
        print(f"   ‚Ä¢ Use a mesma rede Wi-Fi")
        print(f"   ‚Ä¢ Teste a conex√£o: http://{local_ip}:8000/produtos/")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter informa√ß√µes de rede: {e}")

def show_qr_code_info():
    """Mostra informa√ß√µes sobre QR Code"""
    print("\nüì± QR Code para Menu P√∫blico:")
    print("   ‚Ä¢ Cada mesa tem seu pr√≥prio QR Code")
    print("   ‚Ä¢ Acesse: http://localhost:8000/mesas/1/qr-code")
    print("   ‚Ä¢ Clientes podem escanear e ver o menu")
    print("   ‚Ä¢ Funciona mesmo sem comanda aberta")

def show_offline_info():
    """Mostra informa√ß√µes sobre modo offline"""
    print("\nüì± Modo Offline:")
    print("   ‚Ä¢ Tablet funciona sem internet")
    print("   ‚Ä¢ Dados s√£o salvos localmente")
    print("   ‚Ä¢ Sincroniza√ß√£o autom√°tica quando online")
    print("   ‚Ä¢ Opera√ß√µes pendentes s√£o enviadas")

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar Python
    python_cmd = check_python_installation()
    if not python_cmd:
        print("\n‚ùå Python n√£o encontrado. Instale o Python primeiro.")
        return
    
    # Verificar vers√£o
    if not check_python_version(python_cmd):
        print("\n‚ùå Vers√£o do Python incompat√≠vel.")
        return
    
    # Instalar depend√™ncias
    if not install_dependencies(python_cmd):
        print("‚ùå Falha na instala√ß√£o de depend√™ncias")
        return
    
    # Configurar banco
    if not setup_database(python_cmd):
        print("‚ùå Falha na configura√ß√£o do banco")
        return
    
    # Iniciar backend
    if not start_backend(python_cmd):
        print("‚ùå Falha ao iniciar backend")
        return
    
    # Iniciar desktop
    if not start_desktop(python_cmd):
        print("‚ùå Falha ao iniciar desktop")
        return
    
    # Configurar tablet (opcional)
    setup_tablet()
    
    # Mostrar informa√ß√µes
    show_network_info()
    show_qr_code_info()
    show_offline_info()
    
    print("\n" + "=" * 60)
    print("üéâ Sistema iniciado com sucesso!")
    print("=" * 60)
    print("\nüìã Pr√≥ximos passos:")
    print("1. Abra o aplicativo Desktop")
    print("2. Configure impressoras (se necess√°rio)")
    print("3. Teste a cria√ß√£o de comandas")
    print("4. Configure tablets na mesma rede")
    print("5. Teste o QR Code das mesas")
    print("\nüîß Comandos √∫teis:")
    print("   ‚Ä¢ Parar backend: Ctrl+C no terminal do backend")
    print("   ‚Ä¢ Ver logs: tail -f backend.log")
    print("   ‚Ä¢ Backup DB: cp padaria.db backup/")
    print("\nüìû Suporte:")
    print("   ‚Ä¢ Documenta√ß√£o: README.md")
    print("   ‚Ä¢ Demo: DEMO.md")
    print("   ‚Ä¢ Resumo: RESUMO_EXECUTIVO.md")

if __name__ == "__main__":
    main() 